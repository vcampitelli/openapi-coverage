#!/usr/bin/env php
<?php

use OpenApiCoverage\Command;
use OpenApiCoverage\EndpointCollection;
use OpenApiCoverage\Laravel\LaravelBootstrap;
use OpenApiCoverage\OpenApiReader;

require __DIR__ . '/vendor/autoload.php';

try {
    $options = \getopt('', [
        'filter-routes:',
        'spec:',
        'debug',
    ], $restIndex);

    // Application path
    $posArgs = array_slice($argv, $restIndex);
    $basePath = $posArgs[0] ?? getcwd();

    // Ignore routes that match these regular expressions
    $options['filter-routes'] = (empty($options['filter-routes']))
        ? null
        : array_map('trim', explode(',', $options['filter-routes']));

    $command = new Command(
        $basePath,
        $options['filter-routes'],
        $options['spec'] ?? null,
        $options['debug'] ?? false
    );
    $response = $command->getResponse();

    // @TODO require a parameter to specify which application we're running or even create some kind of discoverer
    $bootstrap = new LaravelBootstrap();
    $discovery = $bootstrap($command->getBasePath());

    $collection = new EndpointCollection();

    $response->debug("Iniciando descoberta de endpoints na API...");
    // @TODO marcar arquivos e linhas das rotas
    $discovery($collection, $command->getRouteFilter());
    $routesDiscovered = $collection->hits();
    $response->debug("  Encontrados {$routesDiscovered} endpoints");
    $response->setRoutesDiscovered($routesDiscovered);

    $collection->resetHits();

    $response->debug("Iniciando descoberta de endpoints na especificação OpenAPI...");
    $reader = new OpenApiReader();
    $reader($collection, $command->getOpenApiSpecFile());
    $openApiEndpoints = $collection->hits();
    $response->debug("  Encontrados {$openApiEndpoints} endpoints");
    $response->setSpecEndpoints($openApiEndpoints);

    $count = 0;
    foreach ($collection->getUnmatchedEndpoints() as $endpoint) {
        ++$count;
        $response->debug("{$count}\t{$endpoint->getMethod()}\t{$endpoint->getPath()}");
    }

    $percentage = round($response->getPercentage(), 2);
    $response->debug("Coverage: {$percentage}% ({$openApiEndpoints}/{$routesDiscovered})");
    echo json_encode($response, JSON_PRETTY_PRINT);
} catch (InvalidArgumentException $e) {
    fwrite(
        STDERR,
        "Error: {$e->getMessage()}" . PHP_EOL .
        "Usage: {$argv[0]} [options] [application-path]" . PHP_EOL .
        PHP_EOL .
        'Options:' . PHP_EOL .
        '  --filter <arquivo>   Informa um arquivo que retorna uma função responsável' . PHP_EOL .
        '                       por filtrar se uma rota deve ser considerada ou não' . PHP_EOL .
        '  --openapi <arquivo>  Arquivo YAML da especificação da OpenAPI. Se não passado,' . PHP_EOL .
        '                       tentaremos encontrar um arquivo openapi.yaml na aplicação' . PHP_EOL .
        '  --debug              Prints debugging information' . PHP_EOL
    );
    $code = $e->getCode();
    die(($code > 0) ? $code : 1);
} catch (Throwable $e) {
    fwrite(
        STDERR,
        "Error: {$e->getMessage()}"
    );
    $code = $e->getCode();
    die(($code > 0) ? $code : 1);
}
